-- Object-Oriented Programming

1. What are the six combinations of access modifier keywords and what do they do? 
    public: accessible everywhere
    protected: accessible in the same class or derived class
    internal: accessible in the same assembly
    private: accessible only in current class
    protected internal: allows access inside the same project and via inheritance in other projects
    private protected: allows access in current class and derived class, but prevents access from outside the assembly
    
2. What is the difference between the static, const, and readonly keywords when applied to a type member?
    static: shared across all instances
    const: compile time constant
    readonly: runtime constant
    
3. What does a constructor do?
    A constructor is used to create instance of the class. 
    
4. Why is the partial keyword useful?
    It allows a class, struct, or method to be split across multiple files. 
    This can improve code organization, maintainability, and collaboration among developers.
    
5. What is a tuple?
    A tuple is a data structure that can hold a fixed-size collection of elements, potentially of different types.
    
6. What does the C# record keyword do?
    The record keyword is used to define a reference type that provides immutable data with value-based equality. 
    
7. What does overloading and overriding mean?
    overloading: happens in the same class; the methods have the same access modifiers and same method name but they may have different input/output parameters. 
    overriding: happens when a derived class provides a new implementation for a method that is already defined in its base class; the methods have the same method signature including the access modifier, method name and input/output parameters.
    
8. What is the difference between a field and a property?
    A field is a member of a class or struct that holds data, and it is usually marked as private to encapsulate the data. 
    A property is a member of a class or struct that provides a way to access and modify a field indirectly through get and set methods
    
9. How do you make a method parameter optional?
    By providing a default value for the parameter in the method signature. 
    
10. What is an interface and how is it different from abstract class?   
    Interface defines a contract or blueprint for classes to follow. 
    It specifies a set of methods that the implementing class must provide, but it does not provide any implementation itself.
    
    interface v.s. abstract class: 
    1. Abstract class will provide a base class to its subclasses; is a wise choice when we have a clear class hierarchy. 
       Interface will define common behaviors or functionalities that can be implemented by any class. 
    2. One class can only inherit from one abstract or concrete class but one class can implement multiple interfaces. 
    3. Methods in the abstract class can be abstract or concrete methods, but for methods in interface, they are abstract and public by default. 
    
11. What accessibility level are members of an interface?
    Interface members are always public. 
    
12. True/False. Polymorphism allows derived classes to provide different implementations of the same method.
    True
    
13. True/False. The override keyword is used to indicate that a method in a derived class is providing its own implementation of a method.
    True
    
14. True/False. The new keyword is used to indicate that a method in a derived class is providing its own implementation of a method.
    True
    
15. True/False. Abstract methods can be used in a normal (non-abstract) class. 
    False
    
16. True/False. Normal (non-abstract) methods can be used in an abstract class. 
    True
    
17. True/False. Derived classes can override methods that were virtual in the base class. 
    True
    
18. True/False. Derived classes can override methods that were abstract in the base class. 
    True
    
19. True/False. In a derived class, you can override a method that was neither virtual non abstract in the base class.
    False
    
20. True/False. A class that implements an interface does not have to provide an implementation for all of the members of the interface.
    False
    
21. True/False. A class that implements an interface is allowed to have other members that arenâ€™t defined in the interface.
    True
    
22. True/False. A class can have more than one base class.
    False
    
23. True/False. A class can implement more than one interface.
    True
    